// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	_ "database/sql"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
	"time"
)

var (
	cacheUserIdPrefix     = "cache:user:id:"
	cacheUserNumberPrefix = "cache:user:number:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) error
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByNumber(ctx context.Context, number string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		gormc.CachedConn
		table string
	}

	User struct {
		Id         int64     `gorm:"column:id"`
		Number     string    `gorm:"column:number"`   // 学号
		Name       string    `gorm:"column:name"`     // 用户名称
		Password   string    `gorm:"column:password"` // 用户密码
		Gender     string    `gorm:"column:gender"`   // 男｜女｜未公开
		CreateTime time.Time `gorm:"column:create_time"`
		UpdateTime time.Time `gorm:"column:update_time"`
		DeleteTime time.Time `gorm:"column:delete_time"`
		DelState   int64     `gorm:"column:del_state"`
	}
)

func (User) TableName() string {
	return "`user`"
}

func newUserModel(conn *gorm.DB, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, id)
	var resp User
	err := m.QueryCtx(ctx, &resp, userIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&User{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByNumber(ctx context.Context, number string) (*User, error) {
	userNumberKey := fmt.Sprintf("%s%v", cacheUserNumberPrefix, number)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userNumberKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&User{}).Where("`number` = ?", number).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultUserModel) getCacheKeys(data *User) []string {
	if data == nil {
		return []string{}
	}
	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, data.Id)
	userNumberKey := fmt.Sprintf("%s%v", cacheUserNumberPrefix, data.Number)
	cacheKeys := []string{
		userIdKey, userNumberKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&User{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&User{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
